C51 COMPILER V9.00   MAIN                                                                  04/17/2015 17:21:13 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*
   2           *  Pulse Sensor - A program for transfor heart beat rate to processing upper computer
   3           *  Copyright (C) 2015  Bwelco <bwelcofg@gmail.com>
   4           *
   5           *  MCU                             :STC12C5A60S2
   6           *  WIFI_MCU                    :RAK415
   7           *  ADC PIN                         :P1.0
   8           *  SYSTEM CLOCK            :11.0592MHz
   9           *      Baudrate                        :115200
  10           *  UART                                :P3.0 P3.1
  11           *  COMPILE DATE        :17/04/2015
  12           *
  13           *      This programme use STC12C5A60S2 as main MCU to controll. Wifi MCU is RAK415
  14           *  Use baudrate 115200 and system clock 11.0592MHz.     
  15           *      
  16           *      Usage: Power on, Connect your PC to ssid "RAK415_AP"(MAY BE CHANGED) for no encryption.
  17           *  Then open processing programme.Run it,and you will see the heart beat rate
  18           *  And accurate curve. WAIT when Pluse Sensor and wifi MCU     is starting(about 10 seconds).
  19           *
  20           */
  21          
  22          #include <STC12C5A60S2.h>
  23          #include "stdio.h"
  24          
  25          #define false 0
  26          #define true 1
  27          #define FOSC 11059200L            //系统时钟
  28          #define BAUD 115200                               //波特率
  29          #define T0MS (65536-FOSC/12/500)  //500HZ in 12T MODE
  30          
  31          #define ADC_POWER 0x80                    //ADC POWER CONTROL BIT
  32          #define ADC_FLAG 0x10                     //ADC COMPLETE FLAG
  33          #define ADC_START 0x08;                   //ADC START CONTROL BIT
  34          #define ADC_SPEEDLL 0x00                  //540 CLOCKS
  35          #define ADC_SPEEDL 0x20                   //360 CLOCKS
  36          #define ADC_SPEEDH 0x40                   //180 CLOCKS
  37          #define ADC_SPEEDHH 0x60                  //90 CLOCKS
  38          #define ADC_MASK 0x01
  39          
  40          
  41          void UART_init(void); 
  42          void LED_Disp_Seg7(void);
  43          void ADC_init(unsigned char channel);
  44          void T0_init(void);
  45          void sendDataToProcessing(char symbol, int dat);
  46          void delay(unsigned int n);
  47          void UART_send(char dat);
  48          
  49          unsigned char PulsePin = 0;                 // Pulse Sensor purple wire connected to analog pin 0(P1.0为AD
             -口)
  50          int fadeRate = 0;                           // used to fade LED on with PWM on fadePin
  51          
  52          
  53          // these variables are volatile because they are used during the interrupt service routine!
  54          volatile unsigned int BPM;                  // used to hold the pulse rate
C51 COMPILER V9.00   MAIN                                                                  04/17/2015 17:21:13 PAGE 2   

  55          volatile unsigned int Signal;               // holds the incoming raw data
  56          volatile unsigned int IBI = 600;            // holds the time between beats, must be seeded! 
  57          volatile bit Pulse = false;                 // true when pulse wave is high, false when it's low
  58          volatile bit QS = false;                    // becomes true when Arduoino finds a beat.
  59          volatile int rate[10];                      // array to hold last ten IBI values
  60          volatile unsigned long sampleCounter = 0;   // used to determine pulse timing
  61          volatile unsigned long lastBeatTime = 0;    // used to find IBI
  62          volatile int Peak =512;                     // used to find peak in pulse wave, seeded
  63          volatile int Trough = 512;                  // used to find trough in pulse wave, seeded
  64          volatile int thresh = 512;                  // used to find instant moment of heart beat, seeded
  65          volatile int amp = 100;                     // used to hold amplitude of pulse waveform, seeded
  66          volatile bit firstBeat = true;              // used to seed rate array so we startup with reasonable BPM
  67          volatile bit secondBeat = false;            // used to seed rate array so we startup with reasonable BPM
  68          static unsigned char order=0;
  69          
  70          void sys_init()
  71          {
  72   1          UART_init();                                                // we agree to talk fast!
  73   1              ADC_init(PulsePin);
  74   1          T0_init();                                          // sets up to read Pulse Sensor signal every 2mS  
  75   1      }
  76          
  77          void main(void)
  78          {
  79   1          sys_init();
  80   1              while(1)
  81   1              {
  82   2                      sendDataToProcessing('S', Signal);     // send Processing the raw Pulse Sensor data
  83   2                      if (QS == true)
  84   2                      {                       // Quantified Self flag is true when arduino finds a heartbeat
  85   3                              delay(138); 
  86   3                              fadeRate = 255;                  // Set 'fadeRate' Variable to 255 to fade LED with pulse
  87   3                              sendDataToProcessing('B',BPM);   // send heart rate with a 'B' prefix
  88   3                              delay(138); 
  89   3                              sendDataToProcessing('Q',IBI);   // send time between beats with a 'Q' prefix
  90   3                              delay(138); 
  91   3                              QS = false;                      // reset the Quantified Self flag for next time    
  92   3                      }
  93   2      
  94   2              delay(138);                             //  take a break 19.6ms
  95   2      
  96   2          }
  97   1      }
  98          
  99          void sendDataToProcessing(char symbol, int dat )
 100          {
 101   1              putchar(symbol);                // symbol prefix tells Processing what type of data is coming
 102   1              printf("%d\r\n",dat);                                           // the data to send culminating in a carriage return
 103   1      }
 104          
 105          void UART_init(void)
 106          {
 107   1              PCON &= 0x7f;  
 108   1          SCON = 0x50;   
 109   1          BRT = 0xFD;   
 110   1          AUXR |= 0x04; 
 111   1          AUXR |= 0x01;  
 112   1          AUXR |= 0x10; 
 113   1      }
 114          char putchar(unsigned char dat)
 115          {
 116   1              TI=0;
C51 COMPILER V9.00   MAIN                                                                  04/17/2015 17:21:13 PAGE 3   

 117   1              SBUF=dat;
 118   1              while(!TI);
 119   1              TI=0;   
 120   1              return SBUF;
 121   1      }
 122          
 123          void delay(unsigned int n)
 124          {
 125   1              unsigned int i,j;
 126   1              for(i=0;i<n;i++)
 127   1              {
 128   2                      for(j=0;j<100;j++);
 129   2              }
 130   1      }
 131          
 132          void T0_init(void)
 133          {       
 134   1              TMOD |= 0x01;                           //16bit TIMER
 135   1              TL0=T0MS;
 136   1              TH0=T0MS>>8;
 137   1              TR0=1;                                          //start Timer 0
 138   1              ET0=1;                                          //enable Timer Interrupt
 139   1          EA=1;                               // MAKE SURE GLOBAL INTERRUPTS ARE ENABLED      
 140   1      } 
 141          
 142          void ADC_init(unsigned char channel)
 143          {
 144   1              P1ASF=ADC_MASK<<channel;        //enable PlusePin as ADC INPUT
 145   1              ADC_RES=0;                                      //clear former ADC result
 146   1              ADC_RESL=0;                                     //clear former ADC result
 147   1              AUXR1 |= 0x04;                          //adjust the format of ADC result
 148   1              ADC_CONTR=channel|ADC_POWER|ADC_SPEEDLL|ADC_START;      //power on ADC and start conversion
 149   1      }
 150          
 151          unsigned int analogRead(unsigned char channel)
 152          {
 153   1              unsigned int result;
 154   1      
 155   1              ADC_CONTR &=!ADC_FLAG;          //clear ADC FLAG
 156   1              result=ADC_RES;
 157   1              result=result<<8;
 158   1              result+=ADC_RESL;
 159   1              ADC_CONTR|=channel|ADC_POWER|ADC_SPEEDLL|ADC_START;
 160   1              return result;
 161   1      }
 162          // Timer 0中断子程序，每2MS中断一次，读取AD值，计算心率值
 163          void Timer0_rountine(void) interrupt 1
 164          {                       
 165   1          int N;
 166   1              unsigned char i;
 167   1              // keep a running total of the last 10 IBI values
 168   1          unsigned int runningTotal = 0;                  // clear the runningTotal variable    
 169   1      
 170   1              EA=0;                                      // disable interrupts while we do this
 171   1              TL0=T0MS;
 172   1              TH0=T0MS>>8;                            //reload 16 bit TIMER0
 173   1          Signal = analogRead(PulsePin);              // read the Pulse Sensor 
 174   1          sampleCounter += 2;                         // keep track of the time in mS with this variable
 175   1          N = sampleCounter - lastBeatTime;       // monitor the time since the last beat to avoid noise
 176   1      
 177   1      
 178   1          //  find the peak and trough of the pulse wave
C51 COMPILER V9.00   MAIN                                                                  04/17/2015 17:21:13 PAGE 4   

 179   1          if(Signal < thresh && N > (IBI/5)*3)
 180   1              {       // avoid dichrotic noise by waiting 3/5 of last IBI
 181   2              if (Signal < Trough)
 182   2                      {                        // T is the trough
 183   3                      Trough = Signal;                         // keep track of lowest point in pulse wave 
 184   3              }
 185   2              }
 186   1      
 187   1              if(Signal > thresh && Signal > Peak)
 188   1              {          // thresh condition helps avoid noise
 189   2              Peak = Signal;                             // P is the peak
 190   2              }                                        // keep track of highest point in pulse wave
 191   1      
 192   1       
 193   1              if (N > 250)
 194   1              {                                   // avoid high frequency noise
 195   2                if ( (Signal > thresh) && (Pulse == false) && (N > (IBI/5)*3) )
 196   2                        {        
 197   3                         Pulse = true;                               // set the Pulse flag when we think there is a pulse
 198   3                         IBI = sampleCounter - lastBeatTime;         // measure time between beats in mS
 199   3                         lastBeatTime = sampleCounter;               // keep track of time for next pulse
 200   3      
 201   3                        if(secondBeat)
 202   3                                {                        // if this is the second beat, if secondBeat == TRUE
 203   4                                secondBeat = false;                  // clear secondBeat flag
 204   4                                for(i=0; i<=9; i++)
 205   4                                        {             // seed the running total to get a realisitic BPM at startup
 206   5                                        rate[i] = IBI;                      
 207   5                                }
 208   4                        }
 209   3                      
 210   3                            if(firstBeat)
 211   3                                {                         // if it's the first time we found a beat, if firstBeat == TRUE
 212   4                                      firstBeat = false;                   // clear firstBeat flag
 213   4                                      secondBeat = true;                   // set the second beat flag
 214   4                                      EA=1;                               // enable interrupts again
 215   4                                      return;                              // IBI value is unreliable so discard it
 216   4                            } 
 217   3                      
 218   3                            for(i=0; i<=8; i++)
 219   3                                {                // shift data in the rate array
 220   4                                      rate[i] = rate[i+1];                  // and drop the oldest IBI value 
 221   4                                      runningTotal += rate[i];              // add up the 9 oldest IBI values
 222   4                            }
 223   3                      
 224   3                            rate[9] = IBI;                             // add the latest IBI to the rate array
 225   3                            runningTotal += rate[9];                   // add the latest IBI to runningTotal
 226   3                            runningTotal /= 10;                        // average the last 10 IBI values 
 227   3                            BPM = 60000/runningTotal;                  // how many beats can fit into a minute? that's BPM!
 228   3                                              if(BPM>200)BPM=200;                                     //限制BPM最高显示值
 229   3                                              if(BPM<30)BPM=30;                                       //限制BPM最低显示值
 230   3                            QS = true;                                // set Quantified Self flag 
 231   3                            // QS FLAG IS NOT CLEARED INSIDE THIS ISR
 232   3              }                       
 233   2              }
 234   1      
 235   1                if (Signal < thresh && Pulse == true)
 236   1                {   
 237   2                              Pulse = false;                         // reset the Pulse flag so we can do it again
 238   2                      amp = Peak - Trough;                   // get amplitude of the pulse wave
 239   2                      thresh = amp/2 + Trough;               // set thresh at 50% of the amplitude
 240   2                      Peak = thresh;                         // reset these for next time
C51 COMPILER V9.00   MAIN                                                                  04/17/2015 17:21:13 PAGE 5   

 241   2                      Trough = thresh;
 242   2                }
 243   1              
 244   1                if (N > 2500)
 245   1                {                                                             // if 2.5 seconds go by without a beat
 246   2                      thresh = 512;                           // set thresh default
 247   2                      Peak = 512;                             // set P default
 248   2                      Trough = 512;                           // set T default
 249   2                      lastBeatTime = sampleCounter;           // bring the lastBeatTime up to date        
 250   2                      firstBeat = true;                       // set these to avoid noise
 251   2                      secondBeat = false;                     // when we get the heartbeat back
 252   2                }
 253   1              
 254   1                EA=1;                                         // enable interrupts when youre done!
 255   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    802    ----
   CONSTANT SIZE    =      5    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     46       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
